/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Restaurant,
} from '../models/index';
import {
    RestaurantFromJSON,
    RestaurantToJSON,
} from '../models/index';

export interface CancelAllReservationsRequest {
    restaurantName: string;
}

export interface CancelReservationRequest {
    restaurantName: string;
    reservedBy: string;
    reservationNumber: number;
}

export interface GetTablesRequest {
    restaurantName: string;
}

export interface IsTableAvailableRequest {
    restaurantName: string;
    capacity: number;
}

export interface ReserveRequest {
    restaurantName: string;
    capacity: number;
    reservedBy: string;
}

/**
 * 
 */
export class ReservationControllerApi extends runtime.BaseAPI {

    /**
     */
    async cancelAllReservationsRaw(requestParameters: CancelAllReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['restaurantName'] == null) {
            throw new runtime.RequiredError(
                'restaurantName',
                'Required parameter "restaurantName" was null or undefined when calling cancelAllReservations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restaurantName'] != null) {
            queryParameters['restaurantName'] = requestParameters['restaurantName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reservations/cancelAllReservations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async cancelAllReservations(requestParameters: CancelAllReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.cancelAllReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cancelReservationRaw(requestParameters: CancelReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['restaurantName'] == null) {
            throw new runtime.RequiredError(
                'restaurantName',
                'Required parameter "restaurantName" was null or undefined when calling cancelReservation().'
            );
        }

        if (requestParameters['reservedBy'] == null) {
            throw new runtime.RequiredError(
                'reservedBy',
                'Required parameter "reservedBy" was null or undefined when calling cancelReservation().'
            );
        }

        if (requestParameters['reservationNumber'] == null) {
            throw new runtime.RequiredError(
                'reservationNumber',
                'Required parameter "reservationNumber" was null or undefined when calling cancelReservation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restaurantName'] != null) {
            queryParameters['restaurantName'] = requestParameters['restaurantName'];
        }

        if (requestParameters['reservedBy'] != null) {
            queryParameters['reservedBy'] = requestParameters['reservedBy'];
        }

        if (requestParameters['reservationNumber'] != null) {
            queryParameters['reservationNumber'] = requestParameters['reservationNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reservations/cancelReservation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async cancelReservation(requestParameters: CancelReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.cancelReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRestaurantsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Restaurant>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reservations/restaurants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RestaurantFromJSON));
    }

    /**
     */
    async getRestaurants(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Restaurant>> {
        const response = await this.getRestaurantsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTablesRaw(requestParameters: GetTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['restaurantName'] == null) {
            throw new runtime.RequiredError(
                'restaurantName',
                'Required parameter "restaurantName" was null or undefined when calling getTables().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restaurantName'] != null) {
            queryParameters['restaurantName'] = requestParameters['restaurantName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reservations/allTables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getTables(requestParameters: GetTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getTablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async isTableAvailableRaw(requestParameters: IsTableAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['restaurantName'] == null) {
            throw new runtime.RequiredError(
                'restaurantName',
                'Required parameter "restaurantName" was null or undefined when calling isTableAvailable().'
            );
        }

        if (requestParameters['capacity'] == null) {
            throw new runtime.RequiredError(
                'capacity',
                'Required parameter "capacity" was null or undefined when calling isTableAvailable().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restaurantName'] != null) {
            queryParameters['restaurantName'] = requestParameters['restaurantName'];
        }

        if (requestParameters['capacity'] != null) {
            queryParameters['capacity'] = requestParameters['capacity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reservations/isTableAvailable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async isTableAvailable(requestParameters: IsTableAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.isTableAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reserveRaw(requestParameters: ReserveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['restaurantName'] == null) {
            throw new runtime.RequiredError(
                'restaurantName',
                'Required parameter "restaurantName" was null or undefined when calling reserve().'
            );
        }

        if (requestParameters['capacity'] == null) {
            throw new runtime.RequiredError(
                'capacity',
                'Required parameter "capacity" was null or undefined when calling reserve().'
            );
        }

        if (requestParameters['reservedBy'] == null) {
            throw new runtime.RequiredError(
                'reservedBy',
                'Required parameter "reservedBy" was null or undefined when calling reserve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['restaurantName'] != null) {
            queryParameters['restaurantName'] = requestParameters['restaurantName'];
        }

        if (requestParameters['capacity'] != null) {
            queryParameters['capacity'] = requestParameters['capacity'];
        }

        if (requestParameters['reservedBy'] != null) {
            queryParameters['reservedBy'] = requestParameters['reservedBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/reservations/reserve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async reserve(requestParameters: ReserveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.reserveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
